<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    <description>Spring MVC Configuration</description>

	<!-- 1:开启SpringMVC注解模式 -->
	<mvc:annotation-driven></mvc:annotation-driven>
    
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:platform.properties" />
	
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.sy.platform" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
	</context:component-scan>
    
	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<!--<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">-->
		<!--<mvc:message-converters register-defaults="true">-->
			<!--&lt;!&ndash; 将StringHttpMessageConverter的默认编码设为UTF-8 &ndash;&gt;-->
			<!--<bean class="org.springframework.http.converter.StringHttpMessageConverter">-->
		    	<!--<constructor-arg value="UTF-8" />-->
			<!--</bean>-->
			<!--&lt;!&ndash; 将Jackson2HttpMessageConverter的默认格式化输出为false &ndash;&gt;-->
			<!--<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
                <!--<property name="supportedMediaTypes">-->
                	<!--<list><value>application/json;charset=UTF-8</value></list>-->
                <!--</property>-->
                <!--<property name="prettyPrint" value="false"/>-->
                <!--<property name="objectMapper">  -->
                    <!--<bean class="com.haohan.platform.service.sys.common.mapper.JsonMapper"></bean>-->
                <!--</property> -->
            <!--</bean>-->
            <!--&lt;!&ndash; 使用XML格式输出数据 &ndash;&gt;-->
            <!--<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">-->
		        <!--<constructor-arg>-->
		        	<!--<bean class="org.springframework.oxm.xstream.XStreamMarshaller">-->
				        <!--<property name="streamDriver">-->
				            <!--<bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>-->
				        <!--</property>-->
				        <!--<property name="annotatedClasses">-->
				            <!--<list>-->
				                <!--<value>com.haohan.platform.service.sys.common.persistence.BaseEntity</value>-->
				                <!--<value>com.haohan.platform.service.sys.common.supcan.treelist.TreeList</value>-->
				                <!--<value>com.haohan.platform.service.sys.common.supcan.treelist.cols.Col</value>-->
				                <!--<value>com.haohan.platform.service.sys.common.supcan.treelist.cols.Group</value>-->
				            <!--</list>-->
				        <!--</property>-->
				    <!--</bean>-->
		        <!--</constructor-arg>-->
		        <!--<property name="supportedMediaTypes" value="application/xml"></property>-->
			<!--</bean>-->
		<!--</mvc:message-converters>-->
	<!--</mvc:annotation-driven>-->
	
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map> 
                <entry key="xml" value="application/xml"/> 
                <entry key="json" value="application/json"/> 
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/> <!-- 不能用jstl的那个 -->
		<property name="contentType" value="text/html;charset=UTF-8"/>
		<property name="order" value="1"></property>
	</bean>

	<!-- 配置vm视图解析器 -->
	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/test"></property>
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">utf-8</prop>
				<prop key="output.encoding">utf-8</prop>
				<prop key="file.resource.loader.cache">false</prop>
				<prop key="file.resource.loader.modificationCheckInterval">1</prop>
				<prop key="velocimacro.library.autoreload">false</prop>
			</props>
		</property>
	</bean>
	<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="order" value="0"></property>
		<property name="suffix" value=".vm"></property>
		<property name="contentType" value="text/html;charset=utf-8"></property>
		<property name="dateToolAttribute" value="dateTool"></property>
	</bean>

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	
	<!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>
	
	<!--&lt;!&ndash; 定义无Controller的path<->view直接映射 &ndash;&gt;-->
	<!--<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>-->
	
	<!--&lt;!&ndash; 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。&ndash;&gt;-->
	<!--<mvc:interceptors>-->
		<!--<mvc:interceptor>-->
			<!--<mvc:mapping path="${adminPath}/**" />-->
			<!--<mvc:exclude-mapping path="${adminPath}/"/>-->
			<!--<mvc:exclude-mapping path="${adminPath}/login"/>-->
			<!--<mvc:exclude-mapping path="${adminPath}/sys/menu/tree"/>-->
			<!--<mvc:exclude-mapping path="${adminPath}/sys/menu/treeData"/>-->
			<!--<mvc:exclude-mapping path="${adminPath}/oa/oaNotify/self/count"/>-->
			<!--<bean class="com.haohan.platform.service.sys.modules.sys.interceptor.LogInterceptor" />-->
		<!--</mvc:interceptor>-->
		<!--&lt;!&ndash; 手机视图拦截器 &ndash;&gt;-->
		<!--<mvc:interceptor>-->
			<!--<mvc:mapping path="/**" />-->
			<!--<bean class="com.haohan.platform.service.sys.modules.sys.interceptor.MobileInterceptor" />-->
		<!--</mvc:interceptor>-->
		<!--<mvc:interceptor>-->
			<!--<mvc:mapping path="${frontPath}/xiaodian/**" />-->
			<!--<bean class="com.haohan.platform.service.sys.modules.xiaodian.filter.WebApiInterceptor" />-->
		<!--</mvc:interceptor>-->
	<!--</mvc:interceptors>-->
	
	<!--&lt;!&ndash; 支持Shiro对Controller的方法级AOP安全控制 begin&ndash;&gt;-->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">-->
		<!--<property name="proxyTargetClass" value="true" />-->
	<!--</bean>-->
	<!---->
	<!--<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
		<!--<property name="exceptionMappings">-->
			<!--<props>-->
				<!--<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>-->
				<!--<prop key="java.lang.Throwable">error/500</prop>-->
			<!--</props>-->
			<!--</property>-->
	<!--</bean>-->
	<!--&lt;!&ndash; 支持Shiro对Controller的方法级AOP安全控制 end &ndash;&gt;-->
	
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
		<property name="maxUploadSize" value="${web.maxUploadSize}" />  
	</bean>
	
</beans>